// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/torrent-store.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TorrentStore_Push_FullMethodName  = "/TorrentStore/Push"
	TorrentStore_Pull_FullMethodName  = "/TorrentStore/Pull"
	TorrentStore_Touch_FullMethodName = "/TorrentStore/Touch"
)

// TorrentStoreClient is the client API for TorrentStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentStoreClient interface {
	// Pushes torrent to the store
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	// Pulls torrent from the store
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error)
	// Touch torrent in the store
	Touch(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (*TouchReply, error)
}

type torrentStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentStoreClient(cc grpc.ClientConnInterface) TorrentStoreClient {
	return &torrentStoreClient{cc}
}

func (c *torrentStoreClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushReply)
	err := c.cc.Invoke(ctx, TorrentStore_Push_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentStoreClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullReply)
	err := c.cc.Invoke(ctx, TorrentStore_Pull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentStoreClient) Touch(ctx context.Context, in *TouchRequest, opts ...grpc.CallOption) (*TouchReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TouchReply)
	err := c.cc.Invoke(ctx, TorrentStore_Touch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentStoreServer is the server API for TorrentStore service.
// All implementations must embed UnimplementedTorrentStoreServer
// for forward compatibility.
type TorrentStoreServer interface {
	// Pushes torrent to the store
	Push(context.Context, *PushRequest) (*PushReply, error)
	// Pulls torrent from the store
	Pull(context.Context, *PullRequest) (*PullReply, error)
	// Touch torrent in the store
	Touch(context.Context, *TouchRequest) (*TouchReply, error)
	mustEmbedUnimplementedTorrentStoreServer()
}

// UnimplementedTorrentStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTorrentStoreServer struct{}

func (UnimplementedTorrentStoreServer) Push(context.Context, *PushRequest) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedTorrentStoreServer) Pull(context.Context, *PullRequest) (*PullReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedTorrentStoreServer) Touch(context.Context, *TouchRequest) (*TouchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Touch not implemented")
}
func (UnimplementedTorrentStoreServer) mustEmbedUnimplementedTorrentStoreServer() {}
func (UnimplementedTorrentStoreServer) testEmbeddedByValue()                      {}

// UnsafeTorrentStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentStoreServer will
// result in compilation errors.
type UnsafeTorrentStoreServer interface {
	mustEmbedUnimplementedTorrentStoreServer()
}

func RegisterTorrentStoreServer(s grpc.ServiceRegistrar, srv TorrentStoreServer) {
	// If the following call pancis, it indicates UnimplementedTorrentStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TorrentStore_ServiceDesc, srv)
}

func _TorrentStore_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentStoreServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentStore_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentStoreServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentStore_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentStoreServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentStore_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentStoreServer).Pull(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentStore_Touch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentStoreServer).Touch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TorrentStore_Touch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentStoreServer).Touch(ctx, req.(*TouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentStore_ServiceDesc is the grpc.ServiceDesc for TorrentStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TorrentStore",
	HandlerType: (*TorrentStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _TorrentStore_Push_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _TorrentStore_Pull_Handler,
		},
		{
			MethodName: "Touch",
			Handler:    _TorrentStore_Touch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/torrent-store.proto",
}
